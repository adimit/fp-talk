#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.8.0/
#+REVEAL_TRANS: linear
#+REVEAL_THEME: black
#+OPTIONS: num:nil toc:nil
#+EXCLUDE_TAGS: noexport
#+AUTHOR: Aleksandar Dimitrov
#+TITLE: Funktionale Programmierung in Kotlin mit Œõrrow

* Notes                                                            :noexport:
** Introduction
- Mention last talk with very interesting, but esoteric topic
- Cannot be used in a modern language (although JS allows return values from generators, very similar)
- What if you have to use languages management approves of?
- This talk is going to feature a lot of talk about type systems
- If your code is supposed to support a company erecting a six-story building, then‚Ä¶
- You need to build your software in a relatively conservative language, ‚Ä¶
- With a type system
** Intro type system
SPJ: A type system is supposed to:
- reject bad programs ("obviously" wrong programs)
- accept good programs (programs that make obvious sense, and do something useful)
- In the end it means: type systems are supposed to preclude run-time
  errors, without obstructing the programmer in her creativity, and
  still allow for as many programs *that will not crash* as possible.
- A type system avoids segfaults, and memory corruption
- This is always a trade-off: some valid programs will not make it through. Some invalid programs may make it through.
- I would argue that there are more purposes:
  - make the programmer externalise her mental model of how the code and data flows
  - think about the necessary abstractions, and remind the coder of
    what eventualities they need to think about
  - An untyped, but incorrect program may never crash in runtime ‚Äî by accident. Until you hit production.
  - Types serve as documentation for the next programmer (aka, you, tomorrow)
** Kotlin Overview
- JVM language
- Developed by JetBrains (of IDE fame)
- Sponsored by Google
- Primary language for Android Dev nowadays
- Developed in 2010-2012 because Scala was good, but compile times too slow

*** Features
- Java Interop
- (fast compile times)
- Reference immutability
- Namespaced extension functions (really just syntactic sugar) (Very important later on, when we talk about type classes)
- Show Kotlin code example
- Implicit Deconstruction using =.component0= ‚Ä¶ =.componentN= methods
- lexical scoping
- Data classes (value types)
- Support for pseudo ADTs via sealed classes
- Syntactic support for Nullable Monad
- co-routines

*** Arrow-kt
**** Basic data types
**** Extension functions on common types
**** Lenses
**** Typeclasses
** Type classes
A type constraint such as =Ord= in Haskell is replaced at runtime with
the implementation of the implementing function

Code looks like this:
#+BEGIN_SRC haskell
foo :: forall a. Ord a => [a] => [a]
foo = \xs. sort . reverse $ xs
#+END_SRC

After calling =foo [1,2,3]=, this compiles to some intermediate representation along the lines of
#+BEGIN_SRC haskell
foo = \(xs: [Int]). sort @Int @fOrdInt (reverse @Int xs)
#+END_SRC

The type was specialised to =@Int=, (first argument to the generic
parametric functions) and the =@fOrdInt= function comes from? The =Ord= instance of =Int=!

#+BEGIN_SRC haskell
instance Ord Int where
  compare a b = -- ‚Ä¶ This compiles to @fOrdInt
#+END_SRC

Parametric types? Another argument to your function (think reified
types.) Type classes? Yet another argument to your function, namely
the implementation of the type class.

* Graveyard                                                        :noexport:
** Wie funktionieren Typenklassen w√§hrend des Kompiliervorgangs?
#+BEGIN_SRC haskell
  sort :: Ord a => [a] -> [a]
  reverse :: [a] -> [a]

  f :: (Ord a) => [a] ->[a]
  f l = (reverse . sort) l

  main = print $ f [1,2,3]
#+END_SRC

#+REVEAL: split
#+BEGIN_SRC haskell
  class (Eq a) => Ord a where
    compare:: a -> a -> Ordering

  instance (Eq a) => Ord Int where
    compare a b = -- ‚Ä¶
#+END_SRC

#+REVEAL: split
#+BEGIN_SRC haskell
  sort :: Ord a => [a] -> [a]
  reverse :: [a] -> [a]

  f :: (Ord a) => [a] ->[a]
  f l = (Œªd:Ord a) (reverse . sort d) l
#+END_SRC

- =d= Verzeichnis aller Instanzen von =compare=
- =d= wird vom Compiler injiziert
** TODO Beispiel
Created: [2019-08-29 Thu 22:12]

- we want to create a program that retrieves some data from somewhere, somehow
- it manipulates that data in some way
- it retrieves more data from a second source
- it then manipulates those two sets of data to produce a composite
- it returns that composite

ok, great, but where's the data source? What happens when retrieval
doesn't go as planned. (Advanced: can we parallelize retrieval, or do
we need to depend on the first call to know the second one?)

The example could be skills creation: we get a list of strings. Get
all the skills, get the matching ids. Also the strings (skill names)
that didn't match. Then create new entries for each of these strings
(bonus points: in parallel), get their ids. Join the lists (bonus
points: in the original order) and execute a last request to write the
new list.

Some inspiration:
- https://github.com/dcampogiani/polyjokes/blob/master/README.md
** Haskell-Beispiel
#+BEGIN_SRC haskell
  class Equality a where
    equals :: a -> a -> Bool

  instance (Equality a) => Equality ([a]) where
    equals [] [] = True
    equals [] _ = False
    equals _ [] = False
    equals (x:xs) (y:ys) = equals x y && equals xs ys
#+END_SRC
* √úber mich
- Computerlinguist by Education

- itdesigner seit 6 Monaten

=@adimit=

[[./Gitlab.png]] [[./Github.png]] [[./Twitter.png]]

** üåû
[[./java.png]] [[./kotlin.png]] [[./typescript.png]]

** üåö
[[./rust.png]] [[./haskell.png]]

 (((())))

* Einf√ºhrung
- Funktionale Programme im =$JOB= bei =$CORP=?
- Management muss Technologien absegnen
- Neue Mitarbeiter einlernen?
- Interop mit bestehenden Systemen?
- Code-Qualit√§t?
** Type Systems
Was macht ein Typensystem?

- /Schlechte/ Programme ablehnen
- /Gute/ Programme annehmen

Memory-Safety: ein typengechecktes Programm soll *nicht* durch
Speicherkorruption abst√ºrzen k√∂nnen.

Aber: es soll Programmierung nicht in ihrer Kreativit√§t einschr√§nken

** Typensysteme als Ger√ºst
Typensysteme k√∂nnen bei der Architektur eines Programms helfen:

- Verdeutlichung/Externalisierung des Datenflusses
- Schnelle Interface-Prototypen ohne Implementierung
- Dokumentation
- Codierung eines Teils der Business-Logik

* Overview
- Kotlin
- Etwas Theorie
- Œõrrow Basics
- Typenklassen in Kotlin
- Beispiel
* Kotlin
- Entwickelt durch JetBrains (of IDE fame)
- L√§uft auf JVM, super Java-Interop
- Sponsored by Google
  - 1st Class Android-Support
- Entwickelt in 2010-2012
  - Scala war zwar toll, aber der Compiler war ihnen zu lahm üê¢
** Warum Kotlin?
- Wenn Euer Team sich vor Scala & Clojure f√ºrchtet‚Ä¶
- ‚Ä¶ aber Java schon zu abgestanden schmeckt
- Onboarding von Java-Kollegen zu Kotlin: problemlos
- Kotlin unterst√ºtzt FP syntaktisch besser als Java
** Features
- Kompiliert schnell üêá
- 1st class IDE support
- Einfache Value-Types (data classes)
- Variablendeklaration mit =val= (reference immutability)

#+BEGIN_SRC kotlin
  data class Customer(
          val name: String,
          val email: String,
          val company: String)
#+END_SRC
** Erste Klasse
- 1st class Funktionen h√∂herer Ordnung

#+BEGIN_SRC kotlin
  val positiveNumbers = list.filter { it > 0 }

  // list.filter({element -> element > 0})
#+END_SRC

#+BEGIN_SRC kotlin
  strings.filter { it.length == 5 }
         .sortedBy { it }
         .map { it.toUpperCase() }
#+END_SRC

** Rudiment√§res Pattern-Matching
- Variablen k√∂nnen nach ihren Konstituenten dekonstruiert werden

#+BEGIN_SRC kotlin
  data class Person(val age: Number, val name: String);

  fun printPerson(a: Person) {
      val (age, name) = a

      println("Meet ${name}, ${age} years old.")
  }
#+END_SRC

** Wirklich Pattern-Matching?

In Wahrheit, ein schmutziger Trick:

[[./trick.png]]

** Extension Functions
#+BEGIN_SRC kotlin
  fun <T> MutableList<T>.swap(i: Int, j: Int) {
      val tmp = this[i] // 'this' corresponds to the list
      this[i] = this[j]
      this[j] = tmp
  }

  // ‚Ä¶

  fun <T> foo(list: MutableList<T>) {
      list.swap(0, 1)
  }
#+END_SRC

** "Nur" syntaktischer Zucker

#+BEGIN_SRC kotlin
  fun <T> swap(me: MutableList<T>, i: Int, j: Int) {
      val tmp = me[i]
      me[i] = me[j]
      me[j] = tmp
  }
#+END_SRC

** Tail Call Recursion
#+BEGIN_SRC kotlin
  sealed class L<out T> {
      object Empty: L<Nothing>()
      data class Cons<T>(val h: T): L<T>()
  }

  fun L<Int>.sum(): Int = add(0)

  private tailrec fun L<Int>.add(n0: Int): Int = when (this) {
      is L.Empty -> n0
      is L.Cons -> this.add(this.h)
  }
#+END_SRC
** FP in Kotlin?
- Funktionen sind niemals garantiert referentiell transparent
- =var=-Zuweisung
- =val=-Zuweisung funktioniert wie =final= in Java
- das Typensystem wird uns etwas Kopfzerbrechen bereiten‚Ä¶
- aber Œõrrow hilft
* Etwas Theorie
** Was ist ein Typ?
Typen kann man als *Mengen von Werten* betrachten
- =Int=
$$\{ x | x \in \mathcal{N} \} = \{ 1, 2, 3, \ldots\}$$

** Bewohner eines Typen
- =enum class Colour { red, green }=
$$  \{ \mathrm{red}, \mathrm{green} \} $$

- Man spricht von *Bewohnern eines Typen* (Type inhabitation)

** Spezielle Typen in Kotlin:
- =Any= wird von /allen Werten/ bewohnt
- =Nothing= wird von /keinem Wert/ bewohnt
- =Unit= hat genau einen Bewohner: =Unit=
** Algebraische Datentypen
Ein *Algebraischer Datentyp* ist eine Komposition aus anderen Typen.

** Produkttypen
#+BEGIN_SRC kotlin
  data class Triple<A, B, C>(val a: A, val b: B, c: C)
#+END_SRC
- Die /Anzahl an Bewohnern/ dieses Typen ist *das Produkt* der Bewohnerzahl
  der Typen, aus denen er besteht

** Summentypen
Inheritance l√§sst sich in Kotlin beschr√§nken.

#+BEGIN_SRC kotlin
  sealed class Tree<T> {
    data class Leaf<T>(val t: T): Tree<T>()
    data class Branch<T>(
            val l: Tree<T>,
            val r: Tree<T>
    ): Tree<T>()
  }
#+END_SRC
** "Pattern Matching"
#+BEGIN_SRC kotlin
  fun <T> traverse(t: Tree<T>): List<T> {
      return when (t) {
          is Tree.Leaf -> listOf(t.t)
          is Tree.Branch -> traverse(t.l) + traverse(t.r)
      }
  }
#+END_SRC
** Œª-Kalk√ºl: Abstraktion
$$ f = 42 + (27 * 42) $$
$$ f' = \lambda x. x + (27 * x) $$
$$ f'' = \lambda x. \lambda y. x + (y * x) $$

** Œª-Kalk√ºl: Konversion
$$ f''(12) = \lambda y. 12 + (y * 12) $$
$$ f''(12)(2) = 12 + (2 * 12) = 36$$
** Type Functions
#+BEGIN_SRC kotlin
  fun <A, B, C> ((B) -> C)
          .compose(f: (A) -> B): (A) -> C = { this(f(it)) }

  fun List<Int>.sum(): Int = TODO()
  fun List<String>.parse(): List<Int> = TODO()

  val parseAndSum = List<Int>::sum
      .compose<List<String>, List<Int>, Int>(
          List<String>::parse)

  // (ŒªA.B.C. ((B) -> C).compose(f: (A) -> B): (A) -> C)
  //                      (List<String>) (List<Int>) (Int)

  // ((List<String>) -> List<Int>)
  //  .compose(f: (List<Int>) -> Int): (List<String>) -> Int
#+END_SRC
** Typen und Arten
| Type                      | Kind    |
|---------------------------+---------|
| =Int=, =String=, =Object= | =*=     |
| List<A>, Maybe<A>         | =* ‚Üí *= |
| List<Int>, Maybe<Object>  | =*=     |
| List<Maybe<T>>            | =* ‚Üí *= |
** Aufgabe:
#+ATTR_REVEAL: :frag roll-in
  * =fun ŒªF.A.B. F<A> ‚Üí ((A) ‚Üí B) ‚Üí F<B>=
  * Kind von =A=, =B=?
  * Kind von =F=?

#+ATTR_REVEAL: :frag roll-in
  * =(* ‚Üí *)=
  * Nach welcher Funktion sieht es aus?

#+ATTR_REVEAL: :frag roll-in
  * =map=!
  * Das Kind der Signatur der Funktion?

#+ATTR_REVEAL: :frag roll-in
  * =(* ‚Üí *) ‚Üí * ‚Üí * -> *=

* Œõrrow-kt Basics
** Ein Problem
Erlaubt einfache Manipulation verschachtelter Value Types
#+BEGIN_SRC kotlin
  data class Street(val number: Int, val name: String)
  data class Address(val city: String, val street: Street)
  data class Company(val name: String, val address: Address)
  data class Employee(val name: String, val company: Company?)
#+END_SRC
** Œõrrow f√ºr mehr Durchblick!
#+BEGIN_SRC kotlin
  @optics data class Street(
      val number: Int, val name: String) {companion object}
  @optics data class Address(
      val city: String, val street: Street) {companion object}
  @optics data class Company(
      val name: String, val address: Address) {companion object}
  @optics data class Employee(
      val name: String, val company: Company?) {companion object}

  val e : Employee = TODO()
  val f = Employee.company.address.street.name.modify(e)
      { "$it-Str" }
#+END_SRC

** Data types
Operationen auf Datentypen manipulieren nur den Datentyp selbst, nicht sein generisches Argument

#+ATTR_REVEAL: :frag roll-in
=Option=, =Either=, ...
** Either f√ºr Exceptions
#+BEGIN_SRC kotlin
  sealed class Try<out T> {
     data class Failure(val e: Throwable) : Try<Nothing>()
     data class Success(val v: T) :Try<T>()

     //...
  }

  val dangerous = { throwsAnException() }.try_()
  // dangerous = Failure(e=...)
#+END_SRC
** Validierung
#+BEGIN_SRC kotlin
  sealed class Validated<out E, out A> {
      data class Valid<out A>(val a: A) : Validated<Nothing, A>()
      data class Invalid<out E>(val e: E) : Validated<E, Nothing>()
  }

  fun parse(string: String): Validated<ErrorType, ValueType> = TODO()
#+END_SRC

Erlaubt /sequentielle/ und /parallele/ Validierung
* Typenklassen
** Typenklassen
Eine *Typenklasse* (type class) =T a= definiert eine Reihe von *Funktionen* √ºber einen Wert vom Typ =a=.

Typenklassen abstrahieren √ºber /ad hoc polymorphism/, auch /overloading/.
** Beispiele f√ºr Typenklassen
Grunds√§tzlich unterscheiden wir

- value-Typenklassen:
  - =Eq=, =Ord=, =Num=, =Show=, ‚Ä¶
- type constructor-Typenklassen
  - =Functor=, =Monoid=, =Applicative=, =Monad=, ‚Ä¶
** Wunschkonzert
#+BEGIN_SRC kotlin
  type interface Eq<A> {
      fun A.eq(b: A): Boolean
  }

  instance Eq<String> {
      override fun String.eq(b: String)
        = this.toLowerCase() == b.toLowerCase()
  }

  fun <T: Eq> List<T>.filter(like: T): List<T> = TODO()
#+END_SRC
** Type-Classes f√ºr Werte
#+BEGIN_SRC kotlin
  interface Eqty<A> {
      fun A.eq(b: A): Boolean
  }

  object StringEqtyInstance : Eqty<String> {
      override fun String.eq(b: String): Boolean
              = this.toLowerCase() == b.toLowerCase()
  }

  fun <T> List<T>.filter(t: T, eqty: Eqty<T>): List<T>
          = flatMap { eqty.run {
      if (it.eq(t)) listOf(it) else listOf() }
  }

  val fooList = listOf("foo", "fOo", "bar")
           .find("FOO", StringEqtyInstance)
  // ["foo", "fOo"]
#+END_SRC
** Lauteres Wunschkonzert
#+BEGIN_SRC kotlin
  type interface Functor<F> {
      fun <A, B> F<A>.fmap(f: (A) -> B): F<B>
  }

  instance Functor<List> {
      override fun <A, B> List<A>
              .fmap(f: (A) -> B): List<B> = this.map(f)
  }

  fun <F> parseInt(intf: F<Int>): F<String> =
      intf.fmap { it.toString() }
#+END_SRC
** Warum kann Kotlin keine Higher-Order Typenklassen haben?

#+BEGIN_SRC kotlin
  fun <A> f(l: List<Maybe<A>>): List<A> // valid!
  fun <A, B> map(l: List<A>, f: (A) -> B): List<B> //valid!
#+END_SRC

- Abstrakter Typ =A= hat Kind =*=.
- Konkrete Typen =List= und =Maybe= haben Kind =* ‚Üí *= (Type Constructor)

** Typenkonstruktoren k√∂nnen nicht generisch sein!

#+BEGIN_SRC kotlin
  fun <F, A, B> map(l: F<A>, f: (A) -> B): F<B> // invalid!
#+END_SRC

- Kotlin Generics *m√ºssen* von Kind =*= sein!
- Wir k√∂nnen nicht √ºber Typen vom Kind =* ‚Üí *= abstrahieren!
** L√∂sung: Defunctionalisation!
Aus

#+BEGIN_SRC kotlin
  F<A>
#+END_SRC

wird

#+BEGIN_SRC kotlin
  interface Kind<out F, out A>
#+END_SRC

** Funktor die Zweite
#+BEGIN_SRC kotlin
  interface Functor<F> {
      fun <A, B> F<A>.map(f: (A) -> B): F<B>
  }
#+END_SRC

mit Kind-Proxy:

#+BEGIN_SRC kotlin
  interface Functor<F> {
      fun <A, B> Kind<F, A>.map(f: (A) -> B): Kind<F, B>
  }
#+END_SRC

** Ein Beispiel
#+BEGIN_SRC kotlin
  class ForMaybe private constructor()
  typealias MaybeOf<T> = Kind<ForMaybe, T>

  sealed class Maybe<out T> {
      object No: Maybe<Nothing>()
      data class Yes<T>(val just: T): Maybe<T>()

      fun <B> map(f: (T) -> B): MaybeOf<B> = when (this) {
          is No -> No
          is Yes -> Yes(f(just))
      }
      companion object
  }

  fun <A> MaybeOf<A>.fix(): Maybe<A> = this as Maybe<A> // üò±
#+END_SRC

** Funktor-Instanz auf Kotlin
#+BEGIN_SRC kotlin
  interface MaybeFunctorInstance : Functor<ForMaybe> {
      override fun <A, B> Kind<ForMaybe, A>
          .map(f: (A) -> B): Kind<ForMaybe, B> {
          return fix().map { f(it) }
      }
  }

  fun Maybe.Companion.functor(): MaybeFunctorInstance
    = object : MaybeFunctorInstance { }
#+END_SRC

** Funktoren in Aktion
#+BEGIN_SRC kotlin
  fun <F> incrementAll(
     f: Functor<F>,
     a: Kind<F, Int>
  ): Kind<F, Int> = f.run { a.map { it + 1 } }

  incrementAll(Maybe.functor(), Maybe.Yes(1)).fix() // just 2
  incrementAll(Maybe.functor(), Maybe.No).fix() // No
#+END_SRC
** Œõrrow Sugar
#+BEGIN_SRC kotlin
  @higherkind
  sealed class Maybe<out T> : MaybeOf<T> {
          // ...
  }
#+END_SRC

Und in einem anderen Projekt:

#+BEGIN_SRC kotlin
  @extension
  interface MaybeFunctorInstance : Functor<ForMaybe> {
      override fun // ...
  }

  val foo = incrementAll(Maybe.functor(), /* ... */)
#+END_SRC
** Zusammenfassung
- statt =F<A>= ‚Üí =Kind<F, A>=
- in Kind-Signaturen =ForF= benutzen: =Kind<ForF, A>=
- n√ºtzliches =typealias=: =FOf<A> = Kind<ForF, A>=
** Beginner's Typeclassopedia
- =Functor=: Berechnugnskontext mit Manipulation: =map=
- =Applicative=: Freie Kombination von Werten im Berechnungskontext: =just= & =ap=
- =Monad=: Kontext f√ºr sequentielle Berechnungen: =flatMap=
* Live Coding
Kontext: ich m√∂chte eine LP (=Record=) mit Genres versehen k√∂nnen (=Tag=)

- precondition: =Record=-ID und eine Liste an Strings, die ein Genre bezeichnen

** Anforderungen
- nicht bereits Existierende Tags sollen neu angelegt werden
- bereits existierende Tags sollen wiederverwendet werden
- die LP soll allen angegegeben Tags nach Namen zugeordnet werden

** Beispiel
[[./thewall.jpg]]

- progressive rock
- classic rock (exists)
- psychedelic rock
- rock (exists)

